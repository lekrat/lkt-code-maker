<?php  namespace Lkt\CodeMaker\Tests\Assets\Generated; use Lkt\QueryBuilding\Where; use Lkt\QueryBuilding\DateIntervals\AbstractInterval; class TestWhere extends Where { const COMPONENT = 'maker-test-component'; /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function getEmpty() { /** @var \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere $caller */ $where = parent::getEmpty(); return $where; } public function andIdEqual(int $value) { return $this->andIntegerEqual('id', $value); } public function andIdNot(int $value) { return $this->andIntegerNot('id', $value); } public function andIdGreaterThan(int $value) { return $this->andIntegerGreaterThan('id', $value); } public function andIdGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('id', $value); } public function andIdLowerThan(int $value) { return $this->andIntegerLowerThan('id', $value); } public function andIdLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('id', $value); } public function andIdBetween(int $from, int $to) { return $this->andIntegerBetween('id', $from, $to); } public function andIdIn(array $values) { return $this->andIntegerIn('id', $values); } public function andIdNotIn(array $values) { return $this->andIntegerNotIn('id', $values); } public function orIdEqual(int $value) { return $this->orIntegerEqual('id', $value); } public function orIdNot(int $value) { return $this->orIntegerNot('id', $value); } public function orIdGreaterThan(int $value) { return $this->orIntegerGreaterThan('id', $value); } public function orIdGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('id', $value); } public function orIdLowerThan(int $value) { return $this->orIntegerLowerThan('id', $value); } public function orIdLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('id', $value); } public function orIdBetween(int $from, int $to) { return $this->orIntegerBetween('id', $from, $to); } public function orIdIn(array $values) { return $this->orIntegerIn('id', $values); } public function orIdNotIn(array $values) { return $this->orIntegerNotIn('id', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function idEqual(int $value) { return static::integerEqual('id', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function idNot(int $value) { return static::integerNot('id', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function idGreaterThan(int $value) { return static::integerGreaterThan('id', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function idGreaterOrEqualThan(int $value) { return static::integerGreaterOrEqualThan('id', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function idLowerThan(int $value) { return static::integerLowerThan('id', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function idLowerOrEqualThan(int $value) { return static::integerLowerOrEqualThan('id', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function idBetween(int $from, int $to) { return static::integerBetween('id', $from, $to); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function idIn(array $values) { return static::integerIn('id', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function idNotIn(array $values) { return static::integerNotIn('id', $values); } public function andNameEqual(string $value) { return $this->andStringEqual('name', $value); } public function andNameNot(string $value) { return $this->andStringNot('name', $value); } public function andNameLike(string $value) { return $this->andStringLike('name', $value); } public function andNameNotLike(string $value) { return $this->andStringNotLike('name', $value); } public function andNameBeginsLike(string $value) { return $this->andStringBeginsLike('name', $value); } public function andNameNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('name', $value); } public function andNameEndsLike(string $value) { return $this->andStringEndsLike('name', $value); } public function andNameNotEndsLike(string $value) { return $this->andStringNotEndsLike('name', $value); } public function andNameIn(array $values) { return $this->andStringIn('name', $values); } public function andNameNotIn(array $values) { return $this->andStringNotIn('name', $values); } public function orNameEqual(string $value) { return $this->orStringEqual('name', $value); } public function orNameNot(string $value) { return $this->orStringNot('name', $value); } public function orNameLike(string $value) { return $this->orStringLike('name', $value); } public function orNameNotLike(string $value) { return $this->orStringNotLike('name', $value); } public function orNameBeginsLike(string $value) { return $this->orStringBeginsLike('name', $value); } public function orNameNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('name', $value); } public function orNameEndsLike(string $value) { return $this->orStringEndsLike('name', $value); } public function orNameNotEndsLike(string $value) { return $this->orStringNotEndsLike('name', $value); } public function orNameIn(array $values) { return $this->orStringIn('name', $values); } public function orNameNotIn(array $values) { return $this->orStringNotIn('name', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function nameEqual(string $value) { return static::stringEqual('name', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function nameNot(string $value) { return static::stringNot('name', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function nameLike(string $value) { return static::stringLike('name', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function nameNotLike(string $value) { return static::stringNotLike('name', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function nameBeginsLike(string $value) { return static::stringBeginsLike('name', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function nameNotBeginsLike(string $value) { return static::stringNotBeginsLike('name', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function nameEndsLike(string $value) { return static::stringEndsLike('name', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function nameNotEndsLike(string $value) { return static::stringNotEndsLike('name', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function nameIn(array $values) { return static::stringIn('name', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function nameNotIn(array $values) { return static::stringNotIn('name', $values); } public function andDescriptionEqual(string $value) { return $this->andStringEqual('description', $value); } public function andDescriptionNot(string $value) { return $this->andStringNot('description', $value); } public function andDescriptionLike(string $value) { return $this->andStringLike('description', $value); } public function andDescriptionNotLike(string $value) { return $this->andStringNotLike('description', $value); } public function andDescriptionBeginsLike(string $value) { return $this->andStringBeginsLike('description', $value); } public function andDescriptionNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('description', $value); } public function andDescriptionEndsLike(string $value) { return $this->andStringEndsLike('description', $value); } public function andDescriptionNotEndsLike(string $value) { return $this->andStringNotEndsLike('description', $value); } public function andDescriptionIn(array $values) { return $this->andStringIn('description', $values); } public function andDescriptionNotIn(array $values) { return $this->andStringNotIn('description', $values); } public function orDescriptionEqual(string $value) { return $this->orStringEqual('description', $value); } public function orDescriptionNot(string $value) { return $this->orStringNot('description', $value); } public function orDescriptionLike(string $value) { return $this->orStringLike('description', $value); } public function orDescriptionNotLike(string $value) { return $this->orStringNotLike('description', $value); } public function orDescriptionBeginsLike(string $value) { return $this->orStringBeginsLike('description', $value); } public function orDescriptionNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('description', $value); } public function orDescriptionEndsLike(string $value) { return $this->orStringEndsLike('description', $value); } public function orDescriptionNotEndsLike(string $value) { return $this->orStringNotEndsLike('description', $value); } public function orDescriptionIn(array $values) { return $this->orStringIn('description', $values); } public function orDescriptionNotIn(array $values) { return $this->orStringNotIn('description', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function descriptionEqual(string $value) { return static::stringEqual('description', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function descriptionNot(string $value) { return static::stringNot('description', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function descriptionLike(string $value) { return static::stringLike('description', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function descriptionNotLike(string $value) { return static::stringNotLike('description', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function descriptionBeginsLike(string $value) { return static::stringBeginsLike('description', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function descriptionNotBeginsLike(string $value) { return static::stringNotBeginsLike('description', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function descriptionEndsLike(string $value) { return static::stringEndsLike('description', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function descriptionNotEndsLike(string $value) { return static::stringNotEndsLike('description', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function descriptionIn(array $values) { return static::stringIn('description', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function descriptionNotIn(array $values) { return static::stringNotIn('description', $values); } public function andAgeEqual(int $value) { return $this->andIntegerEqual('age', $value); } public function andAgeNot(int $value) { return $this->andIntegerNot('age', $value); } public function andAgeGreaterThan(int $value) { return $this->andIntegerGreaterThan('age', $value); } public function andAgeGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('age', $value); } public function andAgeLowerThan(int $value) { return $this->andIntegerLowerThan('age', $value); } public function andAgeLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('age', $value); } public function andAgeBetween(int $from, int $to) { return $this->andIntegerBetween('age', $from, $to); } public function andAgeIn(array $values) { return $this->andIntegerIn('age', $values); } public function andAgeNotIn(array $values) { return $this->andIntegerNotIn('age', $values); } public function orAgeEqual(int $value) { return $this->orIntegerEqual('age', $value); } public function orAgeNot(int $value) { return $this->orIntegerNot('age', $value); } public function orAgeGreaterThan(int $value) { return $this->orIntegerGreaterThan('age', $value); } public function orAgeGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('age', $value); } public function orAgeLowerThan(int $value) { return $this->orIntegerLowerThan('age', $value); } public function orAgeLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('age', $value); } public function orAgeBetween(int $from, int $to) { return $this->orIntegerBetween('age', $from, $to); } public function orAgeIn(array $values) { return $this->orIntegerIn('age', $values); } public function orAgeNotIn(array $values) { return $this->orIntegerNotIn('age', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function ageEqual(int $value) { return static::integerEqual('age', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function ageNot(int $value) { return static::integerNot('age', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function ageGreaterThan(int $value) { return static::integerGreaterThan('age', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function ageGreaterOrEqualThan(int $value) { return static::integerGreaterOrEqualThan('age', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function ageLowerThan(int $value) { return static::integerLowerThan('age', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function ageLowerOrEqualThan(int $value) { return static::integerLowerOrEqualThan('age', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function ageBetween(int $from, int $to) { return static::integerBetween('age', $from, $to); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function ageIn(array $values) { return static::integerIn('age', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function ageNotIn(array $values) { return static::integerNotIn('age', $values); } public function andEmailAddressEqual(string $value) { return $this->andStringEqual('email_address', $value); } public function andEmailAddressNot(string $value) { return $this->andStringNot('email_address', $value); } public function andEmailAddressLike(string $value) { return $this->andStringLike('email_address', $value); } public function andEmailAddressNotLike(string $value) { return $this->andStringNotLike('email_address', $value); } public function andEmailAddressBeginsLike(string $value) { return $this->andStringBeginsLike('email_address', $value); } public function andEmailAddressNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('email_address', $value); } public function andEmailAddressEndsLike(string $value) { return $this->andStringEndsLike('email_address', $value); } public function andEmailAddressNotEndsLike(string $value) { return $this->andStringNotEndsLike('email_address', $value); } public function andEmailAddressIn(array $values) { return $this->andStringIn('email_address', $values); } public function andEmailAddressNotIn(array $values) { return $this->andStringNotIn('email_address', $values); } public function orEmailAddressEqual(string $value) { return $this->orStringEqual('email_address', $value); } public function orEmailAddressNot(string $value) { return $this->orStringNot('email_address', $value); } public function orEmailAddressLike(string $value) { return $this->orStringLike('email_address', $value); } public function orEmailAddressNotLike(string $value) { return $this->orStringNotLike('email_address', $value); } public function orEmailAddressBeginsLike(string $value) { return $this->orStringBeginsLike('email_address', $value); } public function orEmailAddressNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('email_address', $value); } public function orEmailAddressEndsLike(string $value) { return $this->orStringEndsLike('email_address', $value); } public function orEmailAddressNotEndsLike(string $value) { return $this->orStringNotEndsLike('email_address', $value); } public function orEmailAddressIn(array $values) { return $this->orStringIn('email_address', $values); } public function orEmailAddressNotIn(array $values) { return $this->orStringNotIn('email_address', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function emailAddressEqual(string $value) { return static::stringEqual('email_address', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function emailAddressNot(string $value) { return static::stringNot('email_address', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function emailAddressLike(string $value) { return static::stringLike('email_address', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function emailAddressNotLike(string $value) { return static::stringNotLike('email_address', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function emailAddressBeginsLike(string $value) { return static::stringBeginsLike('email_address', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function emailAddressNotBeginsLike(string $value) { return static::stringNotBeginsLike('email_address', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function emailAddressEndsLike(string $value) { return static::stringEndsLike('email_address', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function emailAddressNotEndsLike(string $value) { return static::stringNotEndsLike('email_address', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function emailAddressIn(array $values) { return static::stringIn('email_address', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function emailAddressNotIn(array $values) { return static::stringNotIn('email_address', $values); } public function andIsReadyIsTrue() { return $this->andBooleanTrue('isReady'); } public function andIsReadyIsFalse() { return $this->andBooleanFalse('isReady'); } public function orIsReadyIsTrue() { return $this->orBooleanTrue('isReady'); } public function orIsReadyIsFalse() { return $this->orBooleanFalse('isReady'); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function isReadyIsTrue() { return static::booleanTrue('isReady'); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function isReadyIsFalse() { return static::booleanFalse('isReady'); } public function andPriceEqual(float $value) { return $this->andDecimalEqual('price', $value); } public function andPriceNot(float $value) { return $this->andDecimalNot('price', $value); } public function andPriceGreaterThan(float $value) { return $this->andDecimalGreaterThan('price', $value); } public function andPriceGreaterOrEqualThan(float $value) { return $this->andDecimalGreaterOrEqualThan('price', $value); } public function andPriceLowerThan(float $value) { return $this->andDecimalLowerThan('price', $value); } public function andPriceLowerOrEqualThan(float $value) { return $this->andDecimalLowerOrEqualThan('price', $value); } public function andPriceBetween(float $from, float $to) { return $this->andDecimalBetween('price', $from, $to); } public function andPriceIn(array $values) { return $this->andDecimalIn('price', $values); } public function andPriceNotIn(array $values) { return $this->andDecimalNotIn('price', $values); } public function orPriceEqual(float $value) { return $this->orDecimalEqual('price', $value); } public function orPriceNot(float $value) { return $this->orDecimalNot('price', $value); } public function orPriceGreaterThan(float $value) { return $this->orDecimalGreaterThan('price', $value); } public function orPriceGreaterOrEqualThan(float $value) { return $this->orDecimalGreaterOrEqualThan('price', $value); } public function orPriceLowerThan(float $value) { return $this->orDecimalLowerThan('price', $value); } public function orPriceLowerOrEqualThan(float $value) { return $this->orDecimalLowerOrEqualThan('price', $value); } public function orPriceBetween(float $from, float $to) { return $this->orDecimalBetween('price', $from, $to); } public function orPriceIn(array $values) { return $this->orDecimalIn('price', $values); } public function orPriceNotIn(array $values) { return $this->orDecimalNotIn('price', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function priceEqual(float $value) { return static::decimalEqual('price', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function priceNot(float $value) { return static::decimalNot('price', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function priceGreaterThan(float $value) { return static::decimalGreaterThan('price', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function priceGreaterOrEqualThan(float $value) { return static::decimalGreaterOrEqualThan('price', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function priceLowerThan(float $value) { return static::decimalLowerThan('price', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function priceLowerOrEqualThan(float $value) { return static::decimalLowerOrEqualThan('price', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function priceBetween(float $from, float $to) { return static::decimalBetween('price', $from, $to); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function priceIn(array $values) { return static::decimalIn('price', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function priceNotIn(array $values) { return static::decimalNotIn('price', $values); } public function andCreatedAtBetween(string $from, string $to) { return $this->andDatetimeBetween('createdAt', $from, $to); } public function andCreatedAtEqual(string $value) { return $this->andDatetimeEqual('createdAt', $value); } public function andCreatedAtNot(string $value) { return $this->andDatetimeNot('createdAt', $value); } public function andCreatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThan('createdAt', $value, $interval); } public function andCreatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThanNow('createdAt', $interval); } public function andCreatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterThan('createdAt', $value, $interval); } public function andCreatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterThanNow('createdAt', $interval); } public function andCreatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThan('createdAt', $value, $interval); } public function andCreatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThanNow('createdAt', $interval); } public function andCreatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerThan('createdAt', $value, $interval); } public function andCreatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerThanNow('createdAt', $interval); } public function orCreatedAtBetween(string $from, string $to) { return $this->orDatetimeBetween('createdAt', $from, $to); } public function orCreatedAtEqual(string $value) { return $this->orDatetimeEqual('createdAt', $value); } public function orCreatedAtNot(string $value) { return $this->orDatetimeNot('createdAt', $value); } public function orCreatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThan('createdAt', $value, $interval); } public function orCreatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThanNow('createdAt', $interval); } public function orCreatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterThan('createdAt', $value, $interval); } public function orCreatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterThanNow('createdAt', $interval); } public function orCreatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThan('createdAt', $value, $interval); } public function orCreatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThanNow('createdAt', $interval); } public function orCreatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerThan('createdAt', $value, $interval); } public function orCreatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerThanNow('createdAt', $interval); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function createdAtBetween(string $from, string $to) { return static::datetimeBetween('createdAt', $from, $to); } public static function createdAtEqual(string $value) { return static::datetimeEqual('createdAt', $value); } public static function createdAtNot(string $value) { return static::datetimeNot('createdAt', $value); } public static function createdAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return static::datetimeGreaterOrEqualThan('createdAt', $value, $interval); } public static function createdAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return static::datetimeGreaterOrEqualThanNow('createdAt', $interval); } public static function createdAtGreaterThan(string $value, AbstractInterval $interval = null) { return static::datetimeGreaterThan('createdAt', $value, $interval); } public static function createdAtGreaterThanNow(AbstractInterval $interval = null) { return static::datetimeGreaterThanNow('createdAt', $interval); } public static function createdAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return static::datetimeLowerOrEqualThan('createdAt', $value, $interval); } public static function createdAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return static::datetimeLowerOrEqualThanNow('createdAt', $interval); } public static function createdAtLowerThan(string $value, AbstractInterval $interval = null) { return static::datetimeLowerThan('createdAt', $value, $interval); } public static function createdAtLowerThanNow(AbstractInterval $interval = null) { return static::datetimeLowerThanNow('createdAt', $interval); } public function andPropertiesContains($value) { return $this->andForeignKeysContains('properties', $value); } public function orPropertiesContains($value) { return $this->orForeignKeysContains('properties', $value); } public function andMainPropertyEqual(int $value) { return $this->andIntegerEqual('mainProperty', $value); } public function andMainPropertyNot(int $value) { return $this->andIntegerNot('mainProperty', $value); } public function andMainPropertyGreaterThan(int $value) { return $this->andIntegerGreaterThan('mainProperty', $value); } public function andMainPropertyGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('mainProperty', $value); } public function andMainPropertyLowerThan(int $value) { return $this->andIntegerLowerThan('mainProperty', $value); } public function andMainPropertyLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('mainProperty', $value); } public function andMainPropertyBetween(int $from, int $to) { return $this->andIntegerBetween('mainProperty', $from, $to); } public function andMainPropertyIn(array $values) { return $this->andIntegerIn('mainProperty', $values); } public function andMainPropertyNotIn(array $values) { return $this->andIntegerNotIn('mainProperty', $values); } public function orMainPropertyEqual(int $value) { return $this->orIntegerEqual('mainProperty', $value); } public function orMainPropertyNot(int $value) { return $this->orIntegerNot('mainProperty', $value); } public function orMainPropertyGreaterThan(int $value) { return $this->orIntegerGreaterThan('mainProperty', $value); } public function orMainPropertyGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('mainProperty', $value); } public function orMainPropertyLowerThan(int $value) { return $this->orIntegerLowerThan('mainProperty', $value); } public function orMainPropertyLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('mainProperty', $value); } public function orMainPropertyBetween(int $from, int $to) { return $this->orIntegerBetween('mainProperty', $from, $to); } public function orMainPropertyIn(array $values) { return $this->orIntegerIn('mainProperty', $values); } public function orMainPropertyNotIn(array $values) { return $this->orIntegerNotIn('mainProperty', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function mainPropertyEqual(int $value) { return static::integerEqual('mainProperty', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function mainPropertyNot(int $value) { return static::integerNot('mainProperty', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function mainPropertyGreaterThan(int $value) { return static::integerGreaterThan('mainProperty', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function mainPropertyGreaterOrEqualThan(int $value) { return static::integerGreaterOrEqualThan('mainProperty', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function mainPropertyLowerThan(int $value) { return static::integerLowerThan('mainProperty', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function mainPropertyLowerOrEqualThan(int $value) { return static::integerLowerOrEqualThan('mainProperty', $value); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function mainPropertyBetween(int $from, int $to) { return static::integerBetween('mainProperty', $from, $to); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function mainPropertyIn(array $values) { return static::integerIn('mainProperty', $values); } /** @return \Lkt\CodeMaker\Tests\Assets\Generated\TestWhere */ public static function mainPropertyNotIn(array $values) { return static::integerNotIn('mainProperty', $values); } }